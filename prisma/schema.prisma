generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  authorId    String?
  categoryId  Int?
  title       String
  slug        String?   @unique
  full_slug   String?   @unique
  description String?
  content     String?
  keywords    String?
  views       Int?      @default(0)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author   User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("posts")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String?  @unique
  position  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@map("categories")
}

model Contact {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  avatar     String?
  draftReply String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ContactMessage ContactMessage[]

  @@map("contacts")
}

model ContactMessage {
  id        Int                  @id @default(autoincrement())
  message   String
  status    ContactMessageStatus @default(PENDING)
  contactId Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("contact_messages")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  slug          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  is_authorized Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum ContactMessageStatus {
  PENDING
  VIEWED
  CLOSED
}
